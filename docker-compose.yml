# airflow-common is a template for the airflow container
# it is used to define the airflow container and its dependencies
# 
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
    args:
      AIRFLOW_VERSION: "${AIRFLOW_VERSION:-2.9.2}"
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USER}:${DB_ADMIN_PASSWORD}@${DB_HOST_INTERNAL}/${DB_NAME}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${DB_USER}:${DB_ADMIN_PASSWORD}@${DB_HOST_INTERNAL}/${DB_NAME}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:${REDIS_PORT:-6379}/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    
    # Database connection for tasks
    AIRFLOW_CONN_DB: postgresql+psycopg2://${DB_USER}:${DB_ADMIN_PASSWORD}@${DB_HOST_INTERNAL}:${DB_PORT}/${DB_NAME}
    
    # Add additional dependencies (sodapy in this case)
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    
    # ----------------------------------
    # CUSTOM VARIABLES loaded from .env
    # ----------------------------------
    AIRFLOW_VAR_API_KEY: ${AIRFLOW_VAR_API_KEY}
    AIRFLOW_VAR_DB_HOST: ${DB_HOST_INTERNAL}
    AIRFLOW_VAR_DB_USER: ${DB_USER}
    AIRFLOW_VAR_DB_ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
    AIRFLOW_VAR_DB_PORT: ${DB_PORT}
    AIRFLOW_VAR_DB_NAME: ${DB_NAME}
    AIRFLOW_VAR_DB_SCHEMA: ${DB_SCHEMA}
    AIRFLOW_VAR_DBT_PROJECT_DIR: ${DBT_PROJECT_DIR}
  # dns:
  #   - 8.8.8.8
  #   - 8.8.4.4

  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  group_add:
   - ${DOCKER_GID}

services:
  postgres:
    build:
      context: ./PostgreSQL
      dockerfile: Dockerfile
      args:
        - POSTGIS_VERSION=${POSTGIS_VERSION}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_ADMIN_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT_OUTSIDE}:${DB_PORT}"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: ${POSTGRES_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${POSTGRES_HEALTHCHECK_TIMEOUT:-5s}
      retries: ${POSTGRES_HEALTHCHECK_RETRIES:-5}
      start_period: ${POSTGRES_HEALTHCHECK_START_PERIOD:-30s}
    restart: "no"

  redis:
    image: redis:${REDIS_VERSION:-7.2-bookworm}
    expose:
      - ${REDIS_PORT:-6379}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${REDIS_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${REDIS_HEALTHCHECK_TIMEOUT:-30s}
      retries: ${REDIS_HEALTHCHECK_RETRIES:-50}
      start_period: ${REDIS_HEALTHCHECK_START_PERIOD:-30s}
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: ${WEBSERVER_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${WEBSERVER_HEALTHCHECK_TIMEOUT:-10s}
      retries: ${WEBSERVER_HEALTHCHECK_RETRIES:-5}
      start_period: ${WEBSERVER_HEALTHCHECK_START_PERIOD:-30s}
    restart: "no"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: ${SCHEDULER_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${SCHEDULER_HEALTHCHECK_TIMEOUT:-10s}
      retries: ${SCHEDULER_HEALTHCHECK_RETRIES:-5}
      start_period: ${SCHEDULER_HEALTHCHECK_START_PERIOD:-30s}
    restart: "no"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: ${WORKER_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${WORKER_HEALTHCHECK_TIMEOUT:-5s}
      retries: ${WORKER_HEALTHCHECK_RETRIES:-5}
      start_period: ${WORKER_HEALTHCHECK_START_PERIOD:-30s}
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    extra_hosts:
        - "host.docker.internal:host-gateway"
    restart: "no"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: ${TRIGGERER_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${TRIGGERER_HEALTHCHECK_TIMEOUT:-10s}
      retries: ${TRIGGERER_HEALTHCHECK_RETRIES:-5}
      start_period: ${TRIGGERER_HEALTHCHECK_START_PERIOD:-30s}
    restart: "no"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        
        # Initialize the database
        airflow db init
        
        # Create admin user
        airflow users create \
          --username $${_AIRFLOW_WWW_USER_USERNAME} \
          --firstname admin \
          --lastname admin \
          --role Admin \
          --email admin@example.com \
          --password $${_AIRFLOW_WWW_USER_PASSWORD}
        
        # Add database connection
        airflow connections add 'db' \
          --conn-type 'postgres' \
          --conn-host $${DB_HOST_INTERNAL} \
          --conn-login $${DB_USER} \
          --conn-password $${DB_ADMIN_PASSWORD} \
          --conn-port $${DB_PORT} \
          --conn-schema $${DB_NAME}
        
        exec /entrypoint airflow version

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: ${FLOWER_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${FLOWER_HEALTHCHECK_TIMEOUT:-10s}
      retries: ${FLOWER_HEALTHCHECK_RETRIES:-5}
      start_period: ${FLOWER_HEALTHCHECK_START_PERIOD:-30s}
    restart: "no"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  dbt:
    build:
      context: ./dsec_dbt
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: "${PYTHON_VERSION}"
    image: docker_airflow_postgres-main-dbt
    volumes:
      - ./dsec_dbt:/dsec_dbt
    environment:
      DB_HOST: ${DB_HOST_INTERNAL}
      DB_USER: ${DB_USER}
      DB_ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_SCHEMA: ${DB_SCHEMA}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "git", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres-db-volume: